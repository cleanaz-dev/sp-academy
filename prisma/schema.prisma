// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  userId                String
  email                 String                  @unique
  name                  String
  role                  Role                    @default(USER)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  student               Student?
  teacher               Teacher?
  Journal               Journal[]
  StoryQuestions        StoryQuestions[]
  PronunciationSession  PronunciationSession[]
  PronunciationProgress PronunciationProgress[]
  PracticeSessions      PracticeSession[] // Add this relation
  BookReport            BookReport[]
  Book                  Book[]
  Conversation          Conversation[]
}

model Student {
  id      String          @id @default(auto()) @map("_id") @db.ObjectId
  user    User            @relation(fields: [userId], references: [id])
  userId  String          @unique @db.ObjectId
  lessons StudentLesson[]
}

model Teacher {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique @db.ObjectId
  subjects String[]
  lessons  Lesson[]
}

model Lesson {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  subject     String?
  description String?
  duration    String?
  level       Int?
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacher   Teacher?        @relation(fields: [teacherId], references: [id])
  teacherId String?         @db.ObjectId
  students  StudentLesson[]
  quiz      Quiz?
}

model StudentLesson {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @db.ObjectId
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
  lessonId  String  @db.ObjectId
}

model Quiz {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  questions Question[]
  lessonId  String     @unique @db.ObjectId
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Question {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId  String   @db.ObjectId
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  text    String
  options String[]
  answer  String
}

model Journal {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  callId       String   @unique
  record       Boolean?
  recordingUrl String?
  length       String?
  completed    Boolean
  summary      String?
  to           String?
  from         String?
  transcripts  String?
  language     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Story {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  title             String?
  topic             String
  difficulty        String
  paragraphs        Int
  genre             String
  grammar           String
  frenchText        String
  englishText       String
  teaser            String?
  language          String?
  vocabulary        Json // Array of {french, english, grammarType}
  grammarHighlights Json
  exercises         Json? // Array of {expression, explanation}
  audioUrl          String?
  imageUrl          String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  StoryQuestions    StoryQuestions[]
  PracticeSessions  PracticeSession[]
}

model StoryQuestions {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storyId   String   @db.ObjectId
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  question  String[]
  answer    String[]
  mark      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  STUDENT
  TEACHER
  ADMIN
}

model PronunciationSession {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  userId             String              @db.ObjectId
  user               User                @relation(fields: [userId], references: [id])
  referenceText      String
  recognizedText     String
  language           String
  audioUrl           String?
  duration           Float
  overallScore       Float
  accuracyScore      Float
  fluencyScore       Float
  pronunciationScore Float
  completenessScore  Float
  words              PronunciationWord[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model PronunciationWord {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  sessionId     String               @db.ObjectId
  session       PronunciationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  word          String
  accuracyScore Float
  errorType     String // None, Omission, Insertion, Mispronunciation
  duration      Float?
  offset        Float?
  syllables     String[]
  createdAt     DateTime             @default(now())
}

model PronunciationProgress {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String    @db.ObjectId
  user             User      @relation(fields: [userId], references: [id])
  language         String
  totalSessions    Int       @default(0)
  averageScore     Float     @default(0)
  practiceStreak   Int       @default(0)
  lastPracticeDate DateTime?
  commonMistakes   Json? // Array of {word, count, errorType}
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([userId, language])
}

model PracticeSession {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id])
  storyId       String         @db.ObjectId // New field to link to specific story
  story         Story          @relation(fields: [storyId], references: [id])
  status        PracticeStatus @default(IN_PROGRESS)
  language      String
  practiceWords PracticeWord[]
  progress      Float          @default(0) // Percentage of words practiced
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model PracticeWord {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  practiceSessionId String            @db.ObjectId
  practiceSession   PracticeSession   @relation(fields: [practiceSessionId], references: [id], onDelete: Cascade)
  originalWord      String
  attempts          PracticeAttempt[]
  status            WordStatus        @default(NEEDS_PRACTICE)
  originalContext   String? // Add context from the story
  difficulty        Int               @default(1) // Can be used for adaptive practice
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model PracticeAttempt {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  practiceWordId String       @db.ObjectId
  practiceWord   PracticeWord @relation(fields: [practiceWordId], references: [id], onDelete: Cascade)
  audioUrl       String?
  accuracyScore  Float?
  feedback       String?
  createdAt      DateTime     @default(now())
}

model BookReport {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String       @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  bookId      String       @db.ObjectId
  book        Book         @relation(fields: [bookId], references: [id])
  startDate   DateTime     @default(now())
  endDate     DateTime?
  status      ReportStatus @default(NOT_STARTED)
  progress    Float        @default(0)
  report      String?
  rating      Int?         @default(0)
  readingLogs ReadingLog[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Book {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String       @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  title       String
  author      String
  genre       String
  language    String
  pages       Int
  coverUrl    String?
  audioUrl    String?
  description String?
  bookReports BookReport[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model ReadingLog {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  bookReportId String     @db.ObjectId
  bookReport   BookReport @relation(fields: [bookReportId], references: [id], onDelete: Cascade)
  dateRead     DateTime   @default(now())
  startPage    Int
  endPage      Int
  pagesRead    Int
  shortSummary String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Dialogue {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  scenario  String
  level     String
  focus     String
  dialogue  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  introduction Json
  vocabulary   Json[]
  characters   Json[]
  dialogue     Json[]
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  messages     Json?
  imageUrl     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum PracticeStatus {
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum WordStatus {
  NEEDS_PRACTICE
  IMPROVING
  MASTERED
}

enum ReportStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
