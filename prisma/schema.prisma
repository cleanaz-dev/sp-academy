// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  email     String   @unique
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student?
  teacher   Teacher?
  Journal   Journal[]
}

model Student {
  id      String          @id @default(auto()) @map("_id") @db.ObjectId
  user    User            @relation(fields: [userId], references: [id])
  userId  String          @unique @db.ObjectId
  lessons StudentLesson[]
}

model Teacher {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique @db.ObjectId
  subjects String[]
  lessons  Lesson[]
}

model Lesson {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  subject     String?
  description String?
  duration    String?
  level       Int?
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacher   Teacher?        @relation(fields: [teacherId], references: [id])
  teacherId String?         @db.ObjectId
  students  StudentLesson[]
  quiz      Quiz?
}

model StudentLesson {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @db.ObjectId
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
  lessonId  String  @db.ObjectId
}

model Quiz {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  questions Question[]
  lessonId  String     @unique @db.ObjectId
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Question {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId  String   @db.ObjectId
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  text    String
  options String[]
  answer  String
}

model Journal {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String    @unique @db.ObjectId
  user         User      @relation(fields: [userId], references: [id])
  callId       String    @unique
  record       Boolean?
  recordingUrl String?
  length       String?
  completed    Boolean
  summary      String?
  to           String?
  from         String?
  transcripts  String?
  language     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  STUDENT
  TEACHER
  ADMIN
}
