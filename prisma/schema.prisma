// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  userId                String
  email                 String                  @unique
  name                  String
  role                  Role                    @default(USER)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  Journal               Journal[]
  StoryQuestions        StoryQuestions[]
  PronunciationSession  PronunciationSession[]
  PronunciationProgress PronunciationProgress[]
  PracticeSessions      PracticeSession[] // Add this relation
  BookReport            BookReport[]
  Book                  Book[]
  Conversation          Conversation[]
  LearningProgress      LearningProgress[]
  ConversationRecord    ConversationRecord[]
  AccountSettings       AccountSettings?
  BillingInformation    BillingInformation?
  UserProgress          UserProgress[]
  Like                  Like[]
  Course                Course[]
  Enrollment            Enrollment[]
  Progress              Progress[]
  Teacher               Teacher?
  QuizResult            QuizResult[]
  Resource              Resource[]
  AIGeneratedContent    AIGeneratedContent[]
  notifications         Notification[]
  GameScore             GameScore[]
  UserSchedule          UserSchedule[]
}

model Course {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  teacherId   String?      @db.ObjectId
  teacher     User?        @relation(fields: [teacherId], references: [id])
  lessons     Lesson[]
  enrollments Enrollment[]
  level       Level
  coverUrl    String?
  status      CourseStatus // Renamed to be more specific
  duration    String? // Total course duration
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Enrollment {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  userId         String           @db.ObjectId
  courseId       String           @db.ObjectId
  user           User             @relation(fields: [userId], references: [id])
  course         Course           @relation(fields: [courseId], references: [id])
  status         EnrollmentStatus
  progress       Float // Percentage of completion
  lastAccessedAt DateTime?
  completedAt    DateTime?
  lessonProgress Progress[] // Track individual lesson progress
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([userId, courseId])
}

model Progress {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userId       String      @db.ObjectId
  lessonId     String      @db.ObjectId
  user         User        @relation(fields: [userId], references: [id])
  lesson       Lesson      @relation(fields: [lessonId], references: [id])
  status       Status
  score        Int?
  enrollment   Enrollment? @relation(fields: [enrollmentId], references: [id])
  enrollmentId String?     @db.ObjectId
  completedAt  DateTime? // Add this field
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([userId, lessonId])
}

model BillingInformation {
  id                   String          @id @default(auto()) @map("_id") @db.ObjectId
  user                 User            @relation(fields: [userId], references: [id])
  userId               String          @unique @db.ObjectId
  stripeCustomerId     String?
  stripeSubscriptionId String?
  currentPlan          Billing         @default(FREE)
  billingInterval      BillingInterval @default(MONTHLY)
  nextBillingDate      DateTime?
  isActive             Boolean         @default(true)
  cancelAtPeriodEnd    Boolean         @default(false)
  lastPaymentDate      DateTime?
  paymentStatus        PaymentStatus   @default(UNPAID)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
}

model AccountSettings {
  id                        String          @id @default(auto()) @map("_id") @db.ObjectId
  user                      User            @relation(fields: [userId], references: [id])
  userId                    String          @unique @db.ObjectId
  language                  Languages       @default(ENGLISH)
  displayName               String?
  avatarUrl                 String?
  aiVoicePreference         VoicePreference @default(MALE)
  level                     Level?          @default(BEGINNER)
  dailyEmails               Boolean?        @default(true)
  weeklyEmails              Boolean?        @default(true)
  promotionEmails           Boolean?        @default(true)
  shareReadingLogs          Boolean         @default(false)
  shareConversationActivity Boolean         @default(false)
  shareAchievements         Boolean         @default(false)
  shareLessonsAndCourses    Boolean         @default(false)
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
}

model Teacher {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique @db.ObjectId
  subjects String[]
  lessons  Lesson[]
}

model Lesson {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  subject     String?
  description String?
  duration    String?
  level       Int?
  content     String      @db.String
  type        LessonType?
  coverUrl    String?
  topics      Json?
  teacher     Teacher?    @relation(fields: [teacherId], references: [id])
  teacherId   String?     @db.ObjectId
  quiz        Quiz?
  course      Course?     @relation(fields: [courseId], references: [id])
  courseId    String?     @db.ObjectId
  Progress    Progress[]
  orderIndex  Int? // Add this to maintain lesson order in course
  exercise    Exercise[]
  Lecture     Lecture[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Lecture {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  content     String?
  coverUrl    String?
  Lesson      Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId    String?  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Exercise {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  lesson         Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId       String?  @db.ObjectId
  title          String
  type           String // Exercise type identifier
  question       String // Main prompt/instruction
  correctAnswer  String?
  correct_answer String? // Flexible answer storage
  additionalData Json? // All type-specific data
  objectives     Json?
  order          Int? // For sorting within lesson
  completed      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([lessonId, order])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EnrollmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  DROPPED
}

enum LessonType {
  Lesson
  Lecture
  Conversation
  Visual
  Exercise
}

model Quiz {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  questions  Question[]
  lessonId   String       @unique @db.ObjectId
  lesson     Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quizResult QuizResult[]
}

model Question {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId  String   @db.ObjectId
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  text    String
  options String[]
  answer  String
}

model QuizResult {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId      String   @db.ObjectId
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  score       Float
  attempts    Int      @default(0)
  completedAt DateTime @default(now())
}

model Journal {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  callId       String   @unique
  record       Boolean?
  recordingUrl String?
  length       String?
  completed    Boolean
  summary      String?
  to           String?
  from         String?
  transcripts  String?
  language     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Story {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  title             String?
  topic             String
  difficulty        String
  paragraphs        Int
  genre             String
  grammar           String
  frenchText        String
  englishText       String
  teaser            String?
  language          String?
  vocabulary        Json // Array of {french, english, grammarType}
  grammarHighlights Json
  exercises         Json? // Array of {expression, explanation}
  audioUrl          String?
  imageUrl          String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  StoryQuestions    StoryQuestions[]
  PracticeSessions  PracticeSession[]
}

model StoryQuestions {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storyId   String   @db.ObjectId
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  question  String[]
  answer    String[]
  mark      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  STUDENT
  TEACHER
  ADMIN
}

model PronunciationSession {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  userId             String              @db.ObjectId
  user               User                @relation(fields: [userId], references: [id])
  referenceText      String
  recognizedText     String
  language           String
  audioUrl           String?
  duration           Float
  overallScore       Float
  accuracyScore      Float
  fluencyScore       Float
  pronunciationScore Float
  completenessScore  Float
  words              PronunciationWord[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model PronunciationWord {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  sessionId     String               @db.ObjectId
  session       PronunciationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  word          String
  accuracyScore Float
  errorType     String // None, Omission, Insertion, Mispronunciation
  duration      Float?
  offset        Float?
  syllables     String[]
  createdAt     DateTime             @default(now())
}

model PronunciationProgress {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String    @db.ObjectId
  user             User      @relation(fields: [userId], references: [id])
  language         String
  totalSessions    Int       @default(0)
  averageScore     Float     @default(0)
  practiceStreak   Int       @default(0)
  lastPracticeDate DateTime?
  commonMistakes   Json? // Array of {word, count, errorType}
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([userId, language])
}

model PracticeSession {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id])
  storyId       String         @db.ObjectId // New field to link to specific story
  story         Story          @relation(fields: [storyId], references: [id])
  status        PracticeStatus @default(IN_PROGRESS)
  language      String
  practiceWords PracticeWord[]
  progress      Float          @default(0) // Percentage of words practiced
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model PracticeWord {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  practiceSessionId String            @db.ObjectId
  practiceSession   PracticeSession   @relation(fields: [practiceSessionId], references: [id], onDelete: Cascade)
  originalWord      String
  attempts          PracticeAttempt[]
  status            WordStatus        @default(NEEDS_PRACTICE)
  originalContext   String? // Add context from the story
  difficulty        Int               @default(1) // Can be used for adaptive practice
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model PracticeAttempt {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  practiceWordId String       @db.ObjectId
  practiceWord   PracticeWord @relation(fields: [practiceWordId], references: [id], onDelete: Cascade)
  audioUrl       String?
  accuracyScore  Float?
  feedback       String?
  createdAt      DateTime     @default(now())
}

model BookReport {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  userId    String       @db.ObjectId
  user      User         @relation(fields: [userId], references: [id])
  bookId    String       @db.ObjectId
  book      Book         @relation(fields: [bookId], references: [id])
  startDate DateTime     @default(now())
  endDate   DateTime?
  status    ReportStatus @default(NOT_STARTED)
  progress  Float        @default(0)
  report    String?
  rating    Int?         @default(0)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Book {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  title    String
  author   String
  genre    String
  pages    Int
  language String?

  // Reading Tracking
  isReading       Boolean @default(false)
  currentPage     Int     @default(0)
  readingProgress Int     @default(0)
  isCompleted     Boolean @default(false)

  // Optional
  coverUrl    String?
  description String?

  readingLogs ReadingLog[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  BookReport BookReport[]
}

model ReadingLog {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  dateRead     DateTime @default(now())
  startPage    Int
  endPage      Int
  pagesRead    Int
  shortSummary String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  book         Book?    @relation(fields: [bookId], references: [id])
  bookId       String?  @db.ObjectId
}

model Conversation {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  metadata           Json?
  nativeLanguage     Languages?
  tutorLanguage      Languages?
  level              Level?
  introduction       Json
  vocabulary         Json[]
  characters         Json[]
  dialogue           Json[]
  userId             String               @db.ObjectId
  user               User                 @relation(fields: [userId], references: [id])
  messages           Json?
  imageUrl           String?
  aiAvatarUrl        String?
  aiAvatarMaleUrl    String?
  aiAvatarFemaleUrl  String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ConversationRecord ConversationRecord[]
}

model ConversationRecord {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  messages       Json?
  analysis       Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model LearningProgress {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  user               User      @relation(fields: [userId], references: [id])
  level              String    @default("beginner")
  language           Languages @default(ENGLISH)
  vocabularyMastered String[]
  lastActivity       DateTime
}

model Resource {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  type      String // e.g., "DOCUMENT", "VIDEO", "LINK"
  content   String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AIGeneratedContent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  type      String // e.g., "EXERCISE", "EXPLANATION", "QUIZ"
  content   Json
  context   String? // Store the conversation context that generated this
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Achievement {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  category     Category       @relation(fields: [categoryId], references: [id])
  criteria     Json
  imageUrl     String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  categoryId   String         @db.ObjectId
  UserProgress UserProgress[]
}

model UserProgress {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String      @db.ObjectId
  progress      Json?
  unlockedAt    DateTime?
  isUnlocked    Boolean?    @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Category {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  achievements Achievement[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Like {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  activityId String   @db.ObjectId
  type       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, activityId])
}

model Notification {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  type          String
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  toUserId      String   @db.ObjectId
  fromUserId    String   @db.ObjectId
  activityId    String
  activityType  String
  activityTitle String
  isRead        Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, activityId, fromUserId])
  @@index([userId, isRead]) // For fetching unread notifications
  @@index([activityId, type]) // For activity-specific notifications
}

model Game {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String?
  rules            String
  imageUrl         String?
  language         Languages          @default(ENGLISH)
  difficulty       Int                @default(1)
  type             GameType
  theme            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  GameScore        GameScore[]
  gameData         Json[]
  GameSoundEffects GameSoundEffects[]
  GameVariation    GameVariation[]
}

model GameScore {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  gameId    String   @db.ObjectId
  game      Game     @relation(fields: [gameId], references: [id])
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, gameId])
}

model GameSoundEffects {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  gameId        String   @db.ObjectId
  game          Game     @relation(fields: [gameId], references: [id])
  correctAnswer String
  wrongAnswer   String?
  timerBepp     String?
  streakStart   String?
  streakEnd     String?
  gameStart     String?
  gameEnd       String?
  otherSounds   Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model GameVariation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  gameId    String   @db.ObjectId
  game      Game     @relation(fields: [gameId], references: [id])
  variation String   @default("default") // Unique identifier for this variation
  gameData  Json[] // Store structured game content
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gameId, variation]) // Ensure each variation is unique per game
}

model EmailTemplate {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  templateName   String
  subject        String
  content        String
  designHtml     String
  handlebarsType HandlebarsType
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  EmailSchedule  EmailSchedule[]
}

enum HandlebarsType {
  Lesson
  Course
  Book
  Exercise
}

model EmailSchedule {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  scheduleName String
  templateId   String         @db.ObjectId
  status       ScheduleStatus @default(ACTIVE)
  frequency    String // DAILY, WEEKLY, MONTHLY
  startDate    DateTime       @default(now())
  endDate      DateTime? // Optional end date
  timeOfDay    String // Time to send (HH:mm format)
  daysOfWeek   String? // Comma-separated days (e.g., "MON,WED,FRI")
  timeZone     String         @default("UTC")
  lastRun      DateTime? // Track last execution
  nextRun      DateTime? // Calculate next run time
  recipients   String[] // Array of email addresses
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  template      EmailTemplate          @relation(fields: [templateId], references: [id])
  executionLogs ScheduleExecutionLog[]

  UserSchedule UserSchedule[]
}

model UserSchedule {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  user       User          @relation(fields: [userId], references: [id])
  userId     String        @db.ObjectId
  schedule   EmailSchedule @relation(fields: [scheduleId], references: [id])
  scheduleId String        @db.ObjectId
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@unique([userId, scheduleId])
}

model ScheduleExecutionLog {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  scheduleId String        @db.ObjectId
  runAt      DateTime      @default(now())
  status     String // success, failure
  details    String? // Additional details or error message
  schedule   EmailSchedule @relation(fields: [scheduleId], references: [id])
}

enum ScheduleStatus {
  ACTIVE
  PAUSED
  COMPLETED
}

enum GameType {
  Verbal
  Visual
  Acoustic
}

enum PracticeStatus {
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum WordStatus {
  NEEDS_PRACTICE
  IMPROVING
  MASTERED
}

enum ReportStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum Languages {
  ENGLISH
  FRENCH
  SPANISH
}

enum VoicePreference {
  MALE
  FEMALE
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Billing {
  FREE
  BASIC_MONTHLY
  BASIC_ANNUALLY
  PREMIUM_MONTHLY
  PREMIUM_ANNUALLY
}

enum BillingInterval {
  MONTHLY
  ANNUALLY
}

enum PaymentStatus {
  PAID
  UNPAID
  PAST_DUE
  CANCELED
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
